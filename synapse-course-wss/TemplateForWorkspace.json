{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-wss"
		},
		"CosmosDbNoSql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbNoSql1'"
		},
		"synapse-course-wss-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-wss-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-wss.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "tcp:synapse-course-wss-ondemand.sql.azuresynapse.net,1433"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "nyc_taxi_ldw"
		},
		"ls_synapsecoursedl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursedllll.dfs.core.windows.net/"
		},
		"synapse-course-wss-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecoursedllll.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach Folder path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_usp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Silver  Folders",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_silver_taxi_zone_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Silver Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver  Folders",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folder_path": {
						"type": "String",
						"defaultValue": "silver/taxi_zone"
					},
					"v_usp_name": {
						"type": "String",
						"defaultValue": "silver.usp_silver_taxi_zone"
					},
					"v_folder_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-12T16:11:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "Query",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2025-02-16T08:05:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pl_create_silver_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "Query",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.taxi_zone;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2025-02-16T08:05:15Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw\n\nSELECT DISTINCT\n    year,\n    month\nFROM silver.vw_trip_data_green;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Trip Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_silver_taxi_zone_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Partitions",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Create Gold View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;\n"
								},
								{
									"type": "Query",
									"text": "DROP VIEW IF EXISTS gold.vw_trip_data_green;"
								},
								{
									"type": "Query",
									"text": "\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_tax_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        borough         VARCHAR(15),\n        trip_date       DATE,\n        trip_day        VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT,\n        street_hail_trip_count INT,\n        dispatch_trip_count    INT,\n        trip_distance          FLOAT,\n        trip_duration          INT,\n        fare_amount            FLOAT\n  ) AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-16T08:05:19Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw\n\nSELECT DISTINCT\n    year,\n    month\nFROM bronze.vw_trip_data_green_csv;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach Trip Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and month').output.resultSets[0].Rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_silver_taxi_zone_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Partitions",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Create Silver View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;\n"
								},
								{
									"type": "Query",
									"text": "DROP VIEW IF EXISTS silver.vw_trip_data_green;"
								},
								{
									"type": "Query",
									"text": "CREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_tax_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        vendor_id INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-13T12:06:40Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbNoSql1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbNoSql1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_properties_typeProperties_server')]",
					"database": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsecoursedl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapsecoursedl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-wss-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-wss-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-wss-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-wss-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1-create_database')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE master\nGO\n\nCREATE DATABASE nyc_taxi_ldw\nGO\n\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1-explore_taki_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) AS [result]'\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        LocationID SMALLINT,\n        Borough VARCHAR(15)\n\n    ) AS [result]\n\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) WITH(\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    ) AS [result]'\n\nCREATE DATABASE nyc_taxi_discovery;\n\nUSE nyc_taxi_discovery;\n\nALTER DATABASE nyc_taxi_discovery collate LATIN1_GENERAL_100_CI_AS_SC_UTF8;\n\nSELECT name , collation_name from sys.databases;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        LocationID SMALLINT 1,\n        Borough VARCHAR(15) 2\n\n    ) AS [result]\n\n\ncreate EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH(\n    LOCATION = 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw'\n)\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'raw/taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        LocationID SMALLINT 1,\n        Borough VARCHAR(15) 2\n\n    ) AS [result]\n\nDROP EXTERNAL DATA SOURCE nyc_taxi_data_raw_\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10-check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "SELECT\n    LocationID,\n    COUNT(1) as number_of_records\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        LocationID SMALLINT 1,\n        Borough VARCHAR(15) 2 ,\n        zone  VARCHAR(50) 3 ,\n        service_zone VARCHAR(15) 4\n\n    ) AS [result]\nGROUP by LocationID\nHaving COUNT(1) > 1\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n--- tranforming rate_code in bronze layer from csv to parquet and saving to silver layer\nIF OBJECT_ID('silver.rate_code') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code\n\nCREATE EXTERNAL TABLE silver.rate_code\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/rate_code',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT rate_code_id, rate_code\n  FROM OPENROWSET(\n      BULK 'raw/rate_code.json',\n      DATA_SOURCE = 'nyc_tax_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b',\n      ROWTERMINATOR = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS rate_code\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      rate_code_id TINYINT,\n      rate_code VARCHAR(20) \n  )\n\n\n SELECT * FROM silver.rate_code;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_Data_Quilty_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "\n----- basic Quilty Checks\n\nSELECT\n    MIN(total_amount) as min_total_amount,\n    MAX(total_amount) as max_total_amount,\n    AVg(total_amount) as AVG_total_amount,\n    SUM(total_amount) as total_amount,\n    count(1) as total_number_of_records,\n    count(total_amount) as not_nulls_total_amount\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'parquet'\n\n    )AS trip_data\n\n\n--- we see that the min value is -210.3 so we make see this case and try to solve it\nSELECT *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'parquet'\n\n    )AS trip_data\nwhere total_amount < 0\n\n\n\nSELECT payment_type , COUNT(1) as number_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'parquet'\n\n    )AS trip_data\nwhere total_amount < 0\nGROUP by payment_type\norder by payment_type\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type\nGO\n\nCREATE EXTERNAL TABLE silver.payment_type\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/payment_type',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT payment_type, description\n  FROM OPENROWSET(\n      BULK 'raw/payment_type.json',\n      DATA_SOURCE = 'nyc_tax_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      payment_type SMALLINT,\n      description VARCHAR(20) '$.payment_type_desc'\n  );\n\n\n SELECT * FROM silver.payment_type; ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12-join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "\n\n-- identify number of trips made from each borough\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\nWHERE PULocationID IS NULL\n\n\nSELECT taxi_zone.borough, COUNT(1) AS number_of_trips\n  FROM OPENROWSET(\n                    BULK 'trip_data_green_parquet/year=2020/month=01/',\n                    FORMAT = 'PARQUET',\n                    DATA_SOURCE = 'nyc_taxi_data_raw'\n                ) AS trip_data\n        JOIN\n        OPENROWSET(\n                    BULK 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n                    FORMAT = 'CSV',\n                    PARSER_VERSION = '2.0',\n                    FIRSTROW = 2\n\n                ) \n                WITH (\n                    DATA_SOURCE = 'nyc_taxi_data_raw'\n                ) AS trip_data\n        JOIN\n        OPENROWSET(\n                    BULK 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n                    FORMAT = 'CSV',\n                    PARSER_VERSION = '2.0',\n                    FIRSTROW = 2\n\n                ) \n\n\n                    location_id SMALLINT 1,\n                    borough VARCHAR(15) 2,\n                    zone VARCHAR(50) 3,\n                    service_zone VARCHAR(15) 4\n                )AS taxi_zone\n        ON trip_data.PULocationID = taxi_zone.location_id\nGROUP BY taxi_zone.borough\nORDER BY number_of_trips;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n/*\nIF OBJECT_ID('silver.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_data_green\nGO\n\nCREATE EXTERNAL TABLE silver.trip_data_green\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/trip_data_green',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.trip_data_green_csv;\n\n\nSELECT * FROM silver.trip_data_green; \n*/\n\n\nEXEC silver.usp_silver_trip_data_green '2020', '01'\nEXEC silver.usp_silver_trip_data_green '2020', '02'\nEXEC silver.usp_silver_trip_data_green '2020', '03'\nEXEC silver.usp_silver_trip_data_green '2020', '04'\nEXEC silver.usp_silver_trip_data_green '2020', '05'\nEXEC silver.usp_silver_trip_data_green '2020', '06'\nEXEC silver.usp_silver_trip_data_green '2020', '07'\nEXEC silver.usp_silver_trip_data_green '2020', '08'\nEXEC silver.usp_silver_trip_data_green '2020', '09'\nEXEC silver.usp_silver_trip_data_green '2020', '10'\nEXEC silver.usp_silver_trip_data_green '2020', '11'\nEXEC silver.usp_silver_trip_data_green '2020', '12'\nEXEC silver.usp_silver_trip_data_green '2021', '01'\nEXEC silver.usp_silver_trip_data_green '2021', '02'\nEXEC silver.usp_silver_trip_data_green '2021', '03'\nEXEC silver.usp_silver_trip_data_green '2021', '04'\nEXEC silver.usp_silver_trip_data_green '2021', '05'\nEXEC silver.usp_silver_trip_data_green '2021', '06'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO \n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS silver.vw_trip_data_green\nGO\n\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_tax_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        vendor_id INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result]\nGO\n\nSELECT TOP(100) *\n  FROM silver.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14-create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n/*\nCampaigns Requirement\nLet's start with the SELECT statement required to satisfy the requirement (1)\n*/\n\n\nSELECT td.year,\n       td.month,\n       tz.borough,\n       CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n       cal.day_name AS trip_day,\n       CASE WHEN cal.day_name IN ('Saturday','Sunday') THEN 'Y' ELSE 'N' END AS trip_day_weekend_ind,\n       SUM(CASE WHEN pt.description = 'Credit card' THEN 1 ELSE 0 END) AS card_trip_count,\n       SUM(CASE WHEN pt.description = 'Cash' THEN 1 ELSE 0 END) AS cash_trip_count\n  FROM silver.vw_trip_data_green td\n  JOIN silver.taxi_zone tz ON (td.pu_location_id = tz.location_id)\n  JOIN silver.calendar cal ON (cal.date = CONVERT(DATE, td.lpep_pickup_datetime))\n  JOIN silver.payment_type pt ON (td.payment_type = pt.payment_type)\nWHERE td.year = '2020'\n  AND td.month = '01'\nGROUP BY td.year,\n       td.month,\n       tz.borough,\n       CONVERT(DATE, td.lpep_pickup_datetime),\n       cal.day_name\n\n\nEXEC gold.usp_gold_trip_data_green '2020', '01';\nEXEC gold.usp_gold_trip_data_green '2020', '02';\nEXEC gold.usp_gold_trip_data_green '2020', '03';\nEXEC gold.usp_gold_trip_data_green '2020', '04';\nEXEC gold.usp_gold_trip_data_green '2020', '05';\nEXEC gold.usp_gold_trip_data_green '2020', '06';\nEXEC gold.usp_gold_trip_data_green '2020', '07';\nEXEC gold.usp_gold_trip_data_green '2020', '08';\n\nEXEC gold.usp_gold_trip_data_green '2020', '09';\nEXEC gold.usp_gold_trip_data_green '2020', '10';\nEXEC gold.usp_gold_trip_data_green '2020', '11';\nEXEC gold.usp_gold_trip_data_green '2020', '12';\nEXEC gold.usp_gold_trip_data_green '2021', '01';\nEXEC gold.usp_gold_trip_data_green '2021', '02';\nEXEC gold.usp_gold_trip_data_green '2021', '03';\nEXEC gold.usp_gold_trip_data_green '2021', '04';\nEXEC gold.usp_gold_trip_data_green '2021', '05';\nEXEC gold.usp_gold_trip_data_green '2021', '06';\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14-discovery_assigment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n/* Identify the percentage of cash and credit card trips by borough\nExample Data As below\n----------------------------------------------------------------------------------------------\nborough\t    total_trips\tcash_trips\tcard_trips\tcash_trips_percentage\tcard_trips_percentage\n----------------------------------------------------------------------------------------------\nBronx\t    2019\t    751\t        1268\t    37.20\t                62.80\nBrooklyn\t6435\t    2192\t    4243\t    34.06\t                65.94\n----------------------------------------------------------------------------------------------\n*/\n\nWITH v_payment_type AS\n(\nSELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15)) payment_type_desc\n  FROM OPENROWSET(\n      BULK 'payment_type.json',\n      DATA_SOURCE = 'nyc_taxi_data_raw',\n      FORMAT = 'CSV',\n      PARSER_VERSION = '1.0', \n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b',\n      ROWTERMINATOR = '0x0a'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type\n),\nv_taxi_zone AS\n(\nSELECT\n *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR ='\\n'\n    ) AS [result]\n),\nv_trip_data AS\n(\n    \nSELECT \n *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/**',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n  ) AS [result]\n)\nselect v_taxi_zone.Borough, \nsum(case when PULocationID IS NOT NULL THEN 1 else NULL end) as total_trips,\nsum(case when v_payment_type.payment_type_desc = 'Cash' then 1 else null end) as cash_trips,\nsum(case when v_payment_type.payment_type_desc = 'Credit Card' then 1 else null end) as card_trips,\n       CAST((SUM(CASE WHEN v_payment_type.payment_type_desc = 'Cash' THEN 1 ELSE 0 END)/ CAST(COUNT(1) AS DECIMAL)) * 100 AS DECIMAL(5, 2)) AS cash_trips_percentage,\n       CAST((SUM(CASE WHEN v_payment_type.payment_type_desc = 'Credit card' THEN 1 ELSE 0 END)/ CAST(COUNT(1) AS DECIMAL)) * 100 AS DECIMAL(5, 2)) AS card_trips_percentage,\nROUND((sum(case when v_payment_type.payment_type_desc = 'Cash' then 1 else 0 end))/(sum(case when PULocationID IS NOT NULL THEN 1 else 0 end)),2) as cash_trips_percentage,\nROUND((sum(case when v_payment_type.payment_type_desc = 'Credit Card' then 1 else 0 end))/(sum(case when PULocationID IS NOT NULL THEN 1 else 0 end)),2) as card_trips_percentage\nfrom v_trip_data\nleft join v_taxi_zone on v_taxi_zone.LocationID = v_trip_data.PULocationID\nleft join v_payment_type on v_payment_type.payment_type = v_trip_data.payment_type\nWHERE v_payment_type.payment_type_desc IN ('Cash', 'Credit card')\nGROUP by v_taxi_zone.Borough\nORDER BY v_taxi_zone.Borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO \n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_tax_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        borough         VARCHAR(15),\n        trip_date       DATE,\n        trip_day        VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT,\n        street_hail_trip_count INT,\n        dispatch_trip_count    INT,\n        trip_distance          FLOAT,\n        trip_duration          INT,\n        fare_amount            FLOAT\n  ) AS [result]\nGO\n\nSELECT TOP(100) *\n  FROM gold.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/User Stored Procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month + \n        ' WITH\n            (\n                DATA_SOURCE = nyc_tax_src,\n                LOCATION = ''silver/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT [VendorID] AS vendor_id\n                ,[lpep_pickup_datetime]\n                ,[lpep_dropoff_datetime]\n                ,[store_and_fwd_flag]\n                ,[total_amount]\n                ,[payment_type]\n                ,[trip_type]\n                ,[congestion_surcharge]\n                ,[extra]\n                ,[mta_tax]\n                ,[tip_amount]\n                ,[tolls_amount]\n                ,[ehail_fee]\n                ,[improvement_surcharge]\n                ,[RatecodeID] AS rate_code_id\n                ,[PULocationID] AS pu_location_id\n                ,[DOLocationID] AS do_location_id\n                ,[passenger_count]\n                ,[trip_distance]\n                ,[fare_amount]\n        FROM bronze.vw_trip_data_green_csv\n        WHERE year = ''' + @year + '''\n          AND month = ''' + @month + '''';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE silver.trip_data_green_' + @year + '_' + @month;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2-calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data/raw/calendar.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'raw/calendar.csv.csv',\n        DATA_SOURCE = 'nyc_taxi_data' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2-create_external_data_source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'nyc_taxi_src')\n    CREATE EXTERNAL DATA SOURCE nyc_tax_src\n    WITH ( LOCATION = 'https://synapsecoursedllll.dfs.core.windows.net/nyc-taxi-data')",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/User Stored Procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt   NVARCHAR(MAX);\n\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month + \n        ' WITH\n            (\n                DATA_SOURCE = nyc_tax_src,\n                LOCATION = ''gold/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT td.year,\n            td.month,\n            tz.borough,\n            CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n            cal.day_name AS trip_day,\n            CASE WHEN cal.day_name IN (''Saturday'',''Sunday'') THEN ''Y'' ELSE ''N'' END AS trip_day_weekend_ind,\n            SUM(CASE WHEN pt.description = ''Credit card'' THEN 1 ELSE 0 END) AS card_trip_count,\n            SUM(CASE WHEN pt.description = ''Cash'' THEN 1 ELSE 0 END) AS cash_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 ELSE 0 END) AS street_hail_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 ELSE 0 END) AS dispatch_trip_count ,\n            SUM(td.trip_distance) AS trip_distance,\n            SUM(DATEDIFF(MINUTE, td.lpep_pickup_datetime, td.lpep_dropoff_datetime)) AS trip_duration,\n            SUM(td.fare_amount) AS fare_amount            \n        FROM silver.vw_trip_data_green td\n        JOIN silver.taxi_zone tz ON (td.pu_location_id = tz.location_id)\n        JOIN silver.calendar cal ON (cal.date = CONVERT(DATE, td.lpep_pickup_datetime))\n        JOIN silver.payment_type pt ON (td.payment_type = pt.payment_type)\n        JOIN silver.trip_type tt ON (td.trip_type = tt.trip_type)\n        WHERE td.year = ''' + @year + '''\n          AND td.month = ''' + @month + '''\n        GROUP BY td.year,\n                td.month,\n                tz.borough,\n                CONVERT(DATE, td.lpep_pickup_datetime),\n                cal.day_name  ';    \n\n    print(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE gold.trip_data_green_' + @year + '_' + @month;\n\n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3-create_external_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='csv_file_format')\n  CREATE EXTERNAL FILE FORMAT csv_file_format  \n  WITH (  \n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (  \n          FIELD_TERMINATOR = ','  \n        , STRING_DELIMITER = '\"'\n        , First_Row = 2\n        , USE_TYPE_DEFAULT = FALSE \n        , Encoding = 'UTF8'\n        , PARSER_VERSION = '2.0' )   \n  ); \n\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='csv_file_format_pv1')\n  CREATE EXTERNAL FILE FORMAT csv_file_format_pv1\n    WITH (  \n          FORMAT_TYPE = DELIMITEDTEXT,\n          FORMAT_OPTIONS (  \n            FIELD_TERMINATOR = ','  \n          , STRING_DELIMITER = '\"'\n          , First_Row = 2\n          , USE_TYPE_DEFAULT = FALSE \n          , Encoding = 'UTF8'\n          , PARSER_VERSION = '1.0' )   \n    ); \n\n\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='tsv_file_format_pv1')\n  CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n    WITH (  \n          FORMAT_TYPE = DELIMITEDTEXT,\n          FORMAT_OPTIONS (  \n            FIELD_TERMINATOR = '\\t'  \n          , STRING_DELIMITER = '\"'\n          , First_Row = 2\n          , USE_TYPE_DEFAULT = FALSE \n          , Encoding = 'UTF8'\n          , PARSER_VERSION = '1.0' )   \n    ); \n\n\n\n\n-- Create external file format for parquet_file_format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='parquet_file_format')\n  CREATE EXTERNAL FILE FORMAT parquet_file_format  \n  WITH (  \n        FORMAT_TYPE = PARQUET,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n       ); \n\n\n-- Create external file format for delta_file_format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name ='delta_file_format')\n  CREATE EXTERNAL FILE FORMAT delta_file_format  \n  WITH (  \n        FORMAT_TYPE = DELTA,  \n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n       ); ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3-explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vendor_unquoted.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS vendor\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'vendor_escaped.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ESCAPECHAR = '\\\\' ,\n        ROWTERMINATOR = '\\n'\n    )AS vendor\n\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/User Stored Procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\nBEGIN\n    IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n        DROP EXTERNAL TABLE silver.taxi_zone;\n\n    CREATE EXTERNAL TABLE silver.taxi_zone\n        WITH\n        (\n            DATA_SOURCE = nyc_tax_src,\n            LOCATION = 'silver/taxi_zone',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT *\n    FROM bronze.taxi_zone;\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4-trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '\\t' ,\n        ROWTERMINATOR = '\\n'\n    )AS trip_type",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\n\n-- Create taxi_zone table\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone;\n\nCREATE EXTERNAL TABLE bronze.taxi_zone\n    (   location_id SMALLINT ,\n        borough VARCHAR(15) ,\n        zone VARCHAR(50) ,\n        service_zone VARCHAR(15) )  \n    WITH (\n            LOCATION = 'raw/taxi_zone.csv',  \n            DATA_SOURCE = nyc_tax_src,  \n            FILE_FORMAT = csv_file_format_pv1,\n            REJECT_VALUE = 10,\n            REJECTED_ROW_LOCATION = 'rejections/taxi_zone'\n    );\n\nselect * from bronze.taxi_zone;\n\n\nIF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar;\n\nCREATE EXTERNAL TABLE bronze.calendar\n(               \n       date_key        INT,\n        date            DATE,\n        year            SMALLINT,\n        month           TINYINT,\n        day             TINYINT,\n        day_name        VARCHAR(10),\n        day_of_year     SMALLINT,\n        week_of_month   TINYINT,\n        week_of_year    TINYINT,\n        month_name      VARCHAR(10),\n        year_month      INT,\n        year_week       INT \n)  \nWITH (\n        LOCATION = 'raw/calendar.csv',  \n        DATA_SOURCE = nyc_tax_src,  \n        FILE_FORMAT = csv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/calendar'\n);\n\n\nselect * from bronze.calendar;\n\n\n\nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor;\n\nCREATE EXTERNAL TABLE bronze.vendor\n    (\n        vendor_id       TINYINT,\n        vendor_name     VARCHAR(50)\n    )  \n    WITH (\n            LOCATION = 'raw/vendor.csv',  \n            DATA_SOURCE = nyc_tax_src,  \n            FILE_FORMAT = csv_file_format_pv1,\n            REJECT_VALUE = 10,\n            REJECTED_ROW_LOCATION = 'rejections/vendor'\n    );\n\nselect * from bronze.vendor;\n\n\n\n\n\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type;\n\nCREATE EXTERNAL TABLE bronze.trip_type\n(               \n        trip_type       TINYINT,\n        trip_type_desc  VARCHAR(50)\n)  \nWITH (\n        LOCATION = 'raw/trip_type.tsv',  \n        DATA_SOURCE = nyc_tax_src,  \n        FILE_FORMAT = tsv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/calendar'\n);\n\n\nselect * from bronze.trip_type;\n\n\n\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_csv/**',\n        DATA_SOURCE = nyc_tax_src,   \n        FILE_FORMAT = csv_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_csv;\n\n\n\n-- Create trip_data_green_parquet table\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_parquet/**',\n        DATA_SOURCE = nyc_tax_src,   \n        FILE_FORMAT = parquet_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_parquet;\n\n\n\n-- Create trip_data_green_delta table\nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_delta',\n        DATA_SOURCE = nyc_tax_src,   \n        FILE_FORMAT = delta_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_delta;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_create_silver_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/User Stored Procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_calendar\nAS\nBEGIN\n    IF OBJECT_ID('silver.calendar') IS NOT NULL\n        DROP EXTERNAL TABLE silver.calendar;\n\n    CREATE EXTERNAL TABLE silver.calendar\n        WITH\n        (\n            DATA_SOURCE = nyc_tax_src,\n            LOCATION = 'silver/calendar',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT *\n    FROM bronze.calendar;\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n-- Create view for rate code file\nDROP VIEW IF EXISTS bronze.vw_rate_code\nGO\n\n\nCREATE VIEW bronze.vw_rate_code\nAS\nSELECT rate_code_id, rate_code\n  FROM OPENROWSET(\n      BULK 'raw/rate_code.json',\n      DATA_SOURCE = 'nyc_tax_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b',\n      ROWTERMINATOR = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS rate_code\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      rate_code_id TINYINT,\n      rate_code VARCHAR(20) \n  )\nGO\n\nSELECT * FROM bronze.vw_rate_code\nGO\n\n-- Create view for payment type file\nDROP VIEW IF EXISTS bronze.vw_payment_type\nGO\n\nCREATE VIEW bronze.vw_payment_type\nAS\nSELECT payment_type, description\n  FROM OPENROWSET(\n      BULK 'raw/payment_type.json',\n      DATA_SOURCE = 'nyc_tax_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      payment_type SMALLINT,\n      description VARCHAR(20) '$.payment_type_desc'\n  )\nGO\n\nSELECT * FROM bronze.vw_payment_type\nGO\n\n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS bronze.vw_trip_data_green_csv\nGO\n\nCREATE VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_tax_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    )\n    WITH (\n      VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result]\nGO\n\nSELECT TOP(100) *\n  FROM bronze.vw_trip_data_green_csv\nGO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "\nSELECT JSON_VALUE(BulkColumn, '$.payment_type') payment_type,\n    JSON_VALUE(BulkColumn, '$.payment_type_desc') payment_type_desc\nFROM OPENROWSET(\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b', -- Unused character as JSON has no delimiter\n    FIELDQUOTE = '0x0b', \n    ROWTERMINATOR = '0x0a'   -- Newline character for each JSON object\n) WITH (\n    BulkColumn NVARCHAR(MAX) -- Single column for raw JSON text\n) AS payment_type;\n\n\nSELECT payment_type,payment_type_desc\nFROM OPENROWSET(\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b', -- Unused character as JSON has no delimiter\n    FIELDQUOTE = '0x0b'\n) WITH (\n    BulkColumn NVARCHAR(MAX) -- Single column for raw JSON text\n) AS payment_type\nCROSS APPLY OPENJSON(BulkColumn)\nWITH (\n    payment_type INT,\n    payment_type_desc NVARCHAR(100)\n) AS jsonData;\n\n\n\n-------reading file from json array \n\nSELECT payment_type,payment_type_dec_value\nFROM OPENROWSET(\n    BULK 'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b', -- Unused character as JSON has no delimiter\n    FIELDQUOTE = '0x0b'\n) WITH (\n    BulkColumn NVARCHAR(MAX) -- Single column for raw JSON text\n) AS payment_type\nCROSS APPLY OPENJSON(BulkColumn)\nWITH (\n    payment_type INT,\n    payment_type_desc NVARCHAR(max) as Json\n) CROSS APPLY OPENJSON(payment_type_desc)\n WITH (\n    sub_type INT,\n    payment_type_dec_value VARCHAR(20) '$.value'\n );\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_usp_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/User Stored Procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_vendor\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.vendor') IS NOT NULL\n        DROP EXTERNAL TABLE silver.vendor;\n\n    CREATE EXTERNAL TABLE silver.vendor\n        WITH\n        (\n            DATA_SOURCE = nyc_tax_src,\n            LOCATION = 'silver/vendor',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT *\n    FROM bronze.vendor;\n\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6-explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "SELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b', -- Unused character as JSON has no delimiter\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n) WITH (\n    BulkColumn NVARCHAR(MAX) -- Single column for raw JSON text\n) AS rate_code\nCROSS APPLY OPENJSON(BulkColumn)\nWITH (\n    rate_code_id INT,\n    rate_code NVARCHAR(100)\n) AS jsonData;\n\n\n----- multiline json \n\nSELECT rate_code_id,rate_code\nFROM OPENROWSET(\n    BULK 'rate_code_multi_line.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '0x0b', -- Unused character as JSON has no delimiter\n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n\n) WITH (\n    BulkColumn NVARCHAR(MAX) -- Single column for raw JSON text\n) AS rate_code\nCROSS APPLY OPENJSON(BulkColumn)\nWITH (\n    rate_code_id INT,\n    rate_code NVARCHAR(100)\n) AS jsonData;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n\n--- tranforming taxi zone from csv to parquet and saving to silver layer\nIF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone\nGO\n\nCREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.taxi_zone;\n\n\n SELECT * FROM silver.taxi_zone;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_usp_create_silver_trip_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/User Stored Procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_type\nAS\nBEGIN\n    IF OBJECT_ID('silver.trip_type') IS NOT NULL\n        DROP EXTERNAL TABLE silver.trip_type;\n\n    CREATE EXTERNAL TABLE silver.trip_type\n        WITH\n        (\n            DATA_SOURCE = nyc_tax_src,\n            LOCATION = 'silver/trip_type',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT *\n    FROM bronze.trip_type;\n\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7-explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "\n\n------ select all the data from  folder\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\n\n------ select all the data from subfolder\n\n\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\n\n\n----- get the data from more than  file\n\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\n\n\n----- use more than 1 wildcard charcter\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=*/month=*/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\n\n\n---- File metadata function filename()\n\n\nSELECT\n     top 100 \n     green_data.filename() as file_name,\n     green_data.*\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=*/month=*/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\n\n\n--- select how many record for each file\n\nSELECT\n     top 100 \n     green_data.filename() as file_name,\n     COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=*/month=*/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\nGROUP by green_data.filename()\nORDER by green_data.filename()\n\n\n---- limit data using filename function\n\n\nSELECT\n     top 100 \n     green_data.filename() as file_name,\n     COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=*/month=*/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\nWHERE green_data.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP by green_data.filename()\nORDER by green_data.filename()\n\n\n\n\n---- limit data using filepath function\n\n\nSELECT\n     top 100 \n     green_data.filename() as file_name,\n    green_data.filepath() as file_path,\n     COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=*/month=*/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\nWHERE green_data.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP by green_data.filename(),green_data.filepath()\nORDER by green_data.filename(),green_data.filepath()\n\n\n\nSELECT\n     top 100 \n     green_data.filename() as file_name,\n    green_data.filepath(1) as year,\n    green_data.filepath(2) as month,\n     COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=*/month=*/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\nWHERE green_data.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\nGROUP by green_data.filename(),green_data.filepath(1),green_data.filepath(2)\nORDER by green_data.filename(),green_data.filepath(1),green_data.filepath(2)\n\n\n----- use file path in where clasue\n\nSELECT\n     top 100 \n     green_data.filename() as file_name,\n    green_data.filepath(1) as year,\n    green_data.filepath(2) as month,\n     COUNT(1) as record_count\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=*/month=*/*.csv',\n        'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ROWTERMINATOR = '\\n'\n    )AS green_data\nWHERE green_data.filepath(1) = '2020' and green_data.filepath(2) in ('06','07','08')\nGROUP by green_data.filename(),green_data.filepath(1),green_data.filepath(2)\nORDER by green_data.filename(),green_data.filepath(1),green_data.filepath(2)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n --- tranforming calender in bronze layer from csv to parquet and saving to silver layer\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar\nGO\n\nCREATE EXTERNAL TABLE silver.calendar\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/calendar',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.calendar;\n\n\n SELECT * FROM silver.calendar;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_usp_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/User Stored Procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_rate_code\nAS\nBEGIN\n\n    IF OBJECT_ID('silver.rate_code') IS NOT NULL\n        DROP EXTERNAL TABLE silver.rate_code;\n\n    CREATE EXTERNAL TABLE silver.rate_code\n        WITH\n        (\n            DATA_SOURCE = nyc_tax_src,\n            LOCATION = 'silver/rate_code',\n            FILE_FORMAT = parquet_file_format\n        )\n    AS\n    SELECT rate_code_id, rate_code\n    FROM OPENROWSET(\n        BULK 'raw/rate_code.json',\n        DATA_SOURCE = 'nyc_tax_src',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH\n    (\n        jsonDoc NVARCHAR(MAX)\n    ) AS rate_code\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20) \n    );\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8-explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'parquet'\n\n    )\nWITH(\n    tip_amount FLOAT,\n    trip_type int \n)AS green_data\n\n\n--- query from folder using wildcard \n\nSELECT\n    TOP 100 \n    trip_data.filename() as file_name,\n    trip_data.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'parquet'\n    ) AS trip_data\n\n----- query using file name\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n --- tranforming vendor in bronze layer from csv to parquet and saving to silver layer\nIF OBJECT_ID('silver.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendor\n\nCREATE EXTERNAL TABLE silver.vendor\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/vendor',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.vendor;\n\n\n SELECT * FROM silver.vendor;\n\n\n \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_usp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/User Stored Procedure"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_payment_type\nAS\nBEGIN\n\n   IF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type\n\nCREATE EXTERNAL TABLE silver.payment_type\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/payment_type',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT payment_type, description\n  FROM OPENROWSET(\n      BULK 'raw/payment_type.json',\n      DATA_SOURCE = 'nyc_tax_src',\n      FORMAT = 'CSV',\n      FIELDTERMINATOR = '0x0b',\n      FIELDQUOTE = '0x0b'\n  )\n  WITH\n  (\n      jsonDoc NVARCHAR(MAX)\n  ) AS payment_type\n  CROSS APPLY OPENJSON(jsonDoc)\n  WITH(\n      payment_type SMALLINT,\n      description VARCHAR(20) '$.payment_type_desc'\n  );\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9-explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/Discovery"
				},
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw' ,\n        FORMAT = 'Delta'\n\n    ) WITH(\n    tip_amount FLOAT,\n    trip_type int,\n    year VARCHAR(4),\n    month VARCHAR(2)\n) AS trip_data",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n--- tranforming trip_type in bronze layer from csv to parquet and saving to silver layer\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type\n\nCREATE EXTERNAL TABLE silver.trip_type\n    WITH\n    (\n        DATA_SOURCE = nyc_tax_src,\n        LOCATION = 'silver/trip_type',\n        FILE_FORMAT = parquet_file_format\n    )\nAS\nSELECT *\n  FROM bronze.trip_type;\n\n\n SELECT * FROM silver.trip_type;\n\n\n \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_spark_create_gold_trip_data_green_agg')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "trippoolX",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "07ac69cb-f842-47b0-ba6d-29c3c80f5a29"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/1216dbb4-2bbc-44f4-9224-1147ecde1e00/resourceGroups/synapse-course/providers/Microsoft.Synapse/workspaces/synapse-course-wss/bigDataPools/trippoolX",
						"name": "trippoolX",
						"type": "Spark",
						"endpoint": "https://synapse-course-wss.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/trippoolX",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 5
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Trip Data Aggregation \n",
							"### Group By Columns\n",
							"1. year\n",
							"2. Month\n",
							"3. Pickup Location ID\n",
							"4. Drop Off Location ID\n",
							"\n",
							"### Aggregated Columns\n",
							"1. Total Trip Count\n",
							"2. Total Fare Amount\n",
							"\n",
							"### Purpose of the notebook\n",
							"\n",
							"Demonstrate the integration between Spark Pool and Serverless SQL Pool\n",
							"\n",
							"1. Create the aggregated table in Spark Pool\n",
							"2. Access the data from Serverless SQL Pool "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the folder paths so that it can be used later. \n",
							"bronze_folder_path = 'abfss://nyc-taxi-data@synapsecoursedllll.dfs.core.windows.net/raw'\n",
							"silver_folder_path = 'abfss://nyc-taxi-data@synapsecoursedllll.dfs.core.windows.net/silver'\n",
							"gold_folder_path = 'abfss://nyc-taxi-data@synapsecoursedllll.dfs.core.windows.net/gold'"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the spark config to be able to get the partitioned columns year and month as strings rather than integers\n",
							"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"-- Create database to which we are going to write the data\n",
							"CREATE DATABASE IF NOT EXISTS nyc_taxi_ldw_spark\n",
							"LOCATION 'abfss://nyc-taxi-data@synapsecoursedllll.dfs.core.windows.net/gold';"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read the silver data to be processed. \n",
							"trip_data_green_df = spark.read.parquet(f\"{silver_folder_path}/trip_data_green\") "
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations\n",
							"# 1. Total trip count\n",
							"# 2. Total fare amount\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"trip_data_green_agg_df = trip_data_green_df \\\n",
							"                        .groupBy(\"year\", \"month\", \"pu_location_id\", \"do_location_id\") \\\n",
							"                        .agg(count(lit(1)).alias(\"total_trip_count\"),\n",
							"                        round(sum(\"fare_amount\"), 2).alias(\"total_fare_amount\"))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write the aggregated data to the gold table for consumption\n",
							"trip_data_green_agg_df.write.mode(\"overwrite\").partitionBy(\"year\", \"month\").format(\"parquet\").saveAsTable(\"nyc_taxi_ldw_spark.trip_data_green_agg\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trippool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trippoolX')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_taxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		}
	]
}